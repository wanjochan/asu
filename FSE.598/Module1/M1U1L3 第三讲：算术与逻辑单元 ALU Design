
# M1U1L3 第三讲：算术与逻辑单元 ALU Design

## 1. 二进制与十进制的转换
- **方法**：使用**短除法**将十进制转为二进制。
  - 过程：不断除以 2，记录余数，直到商为 0，余数从下往上读。
  - 示例：19 → 19 ÷ 2 = 9 余 1 → 9 ÷ 2 = 4 余 1 → 4 ÷ 2 = 2 余 0 → 2 ÷ 2 = 1 余 0 → 1 ÷ 2 = 0 余 1 → 二进制为 10011。

## 2. 二进制加法
- **规则**：
  - 0 + 0 = 0
  - 0 + 1 = 1
  - 1 + 0 = 1
  - 1 + 1 = 0（进位 1）
  - 1 + 1 + 1 = 1（进位 1）
- **特点**：类似十进制，但只涉及 0 和 1，需注意进位。

## 3. ALU（算术逻辑单元）设计
- **功能**：执行算术运算（如加、减、乘、除）和逻辑运算（如与、或、非、异或）。
- **操作**：
  - **算术**：加法、减法（用补码加法实现）、乘法、除法。
  - **逻辑**：AND（与）、OR（或）、NOT（非）、XOR（异或）。
  - **分支**：相等时分支（branch on equal）、不相等时分支（branch on not equal）、小于则置位（set on less than）。
- **结构**：
  - 32 位 ALU 由 32 个单位置理器组成。
  - 每位支持与、或、加法等操作。
  - **加法器**：串联实现，进位从低位传到高位。
  - **减法**：将减数取 2 的补码后加法实现。
  - **控制线**：4 条控制线选择 16 种运算。

## 4. 补码
- **定义**：
  - **1 的补码**：每位取反（0 → 1，1 → 0）。
  - **2 的补码**：1 的补码加 1。
- **用途**：表示负数，实现减法（A - B = A + (-B)）。

## 5. 乘法设计
- **原理**：通过加法和移位实现。
- **硬件**：
  - 被乘数存寄存器。
  - 乘数逐位检查：若为 1，加被乘数并右移；若为 0，仅右移。
  - 优化：用 32 位 ALU 迭代 32 次，结果存 64 位。
- **示例**：6 (0110) × 5 (0101) = 30 (11110)。

## 6. 除法设计
- **原理**：通过减法和移位实现。
- **硬件**：
  - 被除数和除数存寄存器。
  - 每次尝试减除数，若结果非负，记录 1 并继续；若负，恢复并记录 0。
  - 优化：用 32 位 ALU 迭代 32 次，结果存 64 位（商 32 位 + 余数 32 位）。
- **示例**：6 ÷ 2 = 3（商），余数 0。

## 7. 性能分析
- **加法/减法**：单步完成，速度快。
- **乘法/除法**：需 32 次迭代，速度慢。
- **建议**：编程时优先用加减法优化性能。

---

# 记忆与备考建议
- **重点记忆**：
  - 二进制转换的短除法。
  - 二进制加法规则及进位。
  - ALU 的功能、结构和控制线作用。
  - 补码的计算和应用。
  - 乘法和除法的硬件实现步骤。
- **理解关键**：
  - ALU 如何通过补码实现减法。
  - 乘除法为何耗时更多。
- **复习方法**：
  - 手动演算二进制加法、乘法、除法。
  - 结合视频示例，理解硬件流程。
  - 画 ALU 结构图，加深印象。
